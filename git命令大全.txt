开源框架???
Git是目前世界上最先进的分布式版本控制系统(没有之一)!!!
什么是版本控制系统?
于是你想, 如果有一个软件, 不但能自动帮我记录每次文件的改动, 还可以让同事协作编辑, 这样就不用自己管理一堆类似的文件了, 也不需要把文件传来传去!!!
如果想查看某次改动, 只需要在软件里瞄一眼就可以, 岂不是很方便?
这个软件用起来就应该像这个样子, 能记录每次文件的改动:

版本	文件名	用户	说明	日期
1	service.doc	张三	删除了软件服务条款5	7/12 10:38
2	service.doc	张三	增加了License人数限制	7/12 18:09
3	service.doc	李四	财务部门调整了合同金额	7/13 9:51
4	service.doc	张三	延长了免费升级周期	7/14 15:17

这样, 你就结束了手动管理多个“版本”的史前时代, 进入到版本控制的20世纪。
Git的优势不单是不必联网这么简单, 后面我们还会看到Git极其强大的分支管理, 把SVN等远远抛在了后面!!!
这些分布式版本控制系统各有特点, 但最快、最简单也最流行的依然是Git!!!
Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了!!!
要使用Git, 第一步当然是安装Git了!

windows上安装git成功后, 还需要最后一步设置, 在命令行输入:
	git config --global user.name	"Your Name"
	git config --global user.email	"email@example.com"

因为Git是分布式版本控制系统, 所以, 每个机器都必须自报家门: 你的名字和Email地址。
你也许会担心, 如果有人故意冒充别人怎么办?
这个不必担心, 首先我们相信大家都是善良无知的群众, 其次, 真的有冒充的也是有办法可查的!!!
注意git config命令的--global参数, 用了这个参数, 表示你这台机器上所有的Git仓库都会使用这个配置, 当然也可以对某个仓库指定不同的用户名和Email地址。

git查看一些配置信息的命令:
	(1).查看git所有配置项															git comfig -l
	(2).查看git远程库信息															git remote -v
	(3).查看remote地址, 远程分支, 还有本地分支与之相对应关系等一系列信息			git remote show origin
	
Git查看并修改name和email
	(1).显示name的方法(或者查看~/.gitconfig文件)
								git config user.name
								git config --list
								
	(2).改名字
																git config --global user.name "Furzoom"						vi ~/.gitconfig
	
	(3).如果不加--global就是修改当前仓库的下的配置				git config user.name "Furzoom", 或者直接修改当前仓库的.git/config文件
			修改email, 与上面是同样的操作, 只不过需要将name换行email即可!!!
				
git config查看配置信息
	(1).config配置指令					git config
	(2).config配置有:					system级别, global(用户级别)和local(当前仓库)三个, 设置先从system--->>global--->>local, 底层配置会覆盖顶层配置, 分别使用---> system/global/local, 可以定位到配置文件!!!
	(3).查看系统config:					git config --system --list
	(4).查看当前用户(global)配置:		git config --global --list
	(5).查看当前仓库配置信息:			git config --local	--list
	
git config配置文件
	(1). .Git已经在你的系统中了, 你会做一些事情来客户化你的Git环境; 你只需要做这些设置一次; 即使你升级了, 他们也会绑定到你的环境中, 你也可以在任何时刻通过运行命令来重新更改这些设置!!!
	(2). Git有一个工具被称为git config, 它允许你获得和设置配置变量:			这些变量可以控制Git的外观和操作的各个方面。
				这些变量可以被存储在三个不同的位置:
							a./etc/gitconfig文件:			包含了适用于系统所有用户和所有库的值, 如果你传递参数选项'--system'给git config, 它将明确的读和写这个文件;
							b.~/.gitconfig 文件:			具体到你的用户, 你可以通过传递--global选项使Git读或写这个特定的文件;
							c.位于git目录的config文件(也就是.git/config):		无论你当前在用的库是什么, 特定指向该单一的库, 每个级别重写前一个级别的值, 因此, 在.git/config中的值覆盖了在/etc/gitconfig中的同一个值!!!
							
			在Windows系统中, Git在$HOME目录中查找.gitconfig文件(对大多数人来说, 位于C:\Documents and Settings\$USER下);
			它也会查找/etc/gitconfig, 尽管它是相对于Msys根目录的;
			这可能是你在Windows中运行安装程序时决定安装Git的任何地方!!!

	(3).你的标识(Your Identity)
				a.当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址; 这是非常重要的, 因为每次Git提交都会使用该信息!!!	它被永远的嵌入到了你的提交中:
									git config --global user.name "John Doe"
									git config --global user.email johndoe@example.com
						重申一遍, 你只需要做一次这个设置。
						如果你传递了--global选项, 因为Git将总是会使用该信息来处理你在系统中所做的一切操作。
						如果你希望在一个特定的项目中使用不同的名称或e-mail地址, 你可以在该项目中运行该命令而不要--global选项!!!
	
	(4).你的编辑器(Your Editor)
				
	
	(5).你的比较工具(Your Diff Tool)
	
	(6).检查你的设置(Checking Your Settings)
	
	(7).获取帮助(Getting help)
	
	(8).总结(Summary)					你应该对Git是什么以及Git与你可能使用的其它CVCS之间的不同有了一个基本的了解, 你也应当在你的系统中有了一个具有你个人标识的可以工作的Git版本, 是时候来学习一些Git的基本知识了。


	
{[-创建版本库-]}
	(1).什么是版本库呢? 版本库又名仓库, 英文名repository, 你可以简单理解成一个目录, 这个目录里面的所有文件都可以被Git管理起来, 每个文件的修改、删除, Git都能跟踪, 以便任何时刻都可以追踪历史, 或者在将来某个时刻可以"还原"!!!
	(2).创建一个版本库非常简单, 首先, 选择一个合适的地方, 创建一个空目录(如果你使用Windows系统, 为了避免遇到各种莫名其妙的问题, 请确保目录名(包括父目录)不包含中文!!!)
	(3).通过git init命令把这个目录变成Git可以管理的仓库;		
				瞬间Git就把仓库建好了, 而且告诉你是一个空的仓库(empty Git repository), 细心的读者可以发现当前目录下多了一个.git的目录, 
			这个目录是Git来跟踪管理版本库的, 没事千万不要手动修改这个目录里面的文件, 不然改乱了, 就把Git仓库给破坏了!!!
	(4).Linux环境下, 如果你没有看到.git目录, 那是因为这个目录默认是隐藏的, 用ls -ah命令就可以看见!!!
	(5).把文件添加到版本库
				①.所有的版本控制系统, 其实只能跟踪文本文件的改动, 比如TXT文件, 网页, 所有的程序代码等等, Git也不例外!!!
				②.版本控制系统可以告诉你每次的改动, 比如在第5行加了一个单词"Linux", 在第8行删了一个单词"Windows";
				③.图片、视频这些二进制文件, 虽然也能由版本控制系统管理, 但没法跟踪文件的变化, 只能把二进制文件每次改动串起来, 也就是只知道图片从100KB改成了120KB, 但到底改了啥, 版本控制系统不知道, 也没法知道!!!
				④.如果要真正使用版本控制系统, 就要以纯文本方式编写文件!!!
				⑤.因为文本是有编码的, 比如中文有常用的GBK编码, 日文有Shift_JIS编码, 如果没有历史遗留问题, 强烈建议使用标准的UTF-8编码, 所有语言使用同一种编码, 既没有冲突, 又被所有平台所支持!!!
				⑥.千万不要使用Windows自带的记事本编辑任何文本文件, 原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件, 他们自作聪明地在每个文件开头添加了0xefbbbf(十六进制)的字符,
						你会遇到很多不可思议的问题, 比如, 网页第一行可能会显示一个"?", 明明正确的程序一编译就报语法错误, 等等, 都是由记事本的弱智行为带来的。
						建议你下载Notepad++代替记事本, 不但功能强大, 而且免费!
						记得把Notepad++的默认编码设置为UTF-8 without BOM即可!!!!!!
			
			现在我们编写一个readme.txt文件, 内容如下:
					Git is a version control system.
					Git is free software.
			一定要放到learngit目录下(子目录也行), 因为这是一个Git仓库, 放到其他地方Git再厉害也找不到这个文件!!!
			和把大象放到冰箱需要3步相比, 把一个文件放到Git仓库只需要两步:
					step1:		用命令git add告诉Git, 把文件添加到仓库				git add readme.txt,		执行上面的命令, 没有任何显示, 这就对了, Unix的哲学是"没有消息就是好消息", 说明添加成功!!!
					step2:		用命令git commit告诉Git, 把文件提交到仓库			git commit -m "wrote a readme file"
									简单解释一下git commit命令, -m后面输入的是本次提交的说明, 可以输入任意内容, 当然最好是有意义的, 这样你就能从历史记录里方便地找到改动记录!!!
									实在不想输入说明的, 怎么办???
			
			git commit命令执行成功后会告诉你, 1 file changed: 1个文件被改动(我们新添加的readme.txt文件); 2 insertions: 插入了两行内容(readme.txt有两行内容)。
	
	(6).为什么Git添加文件需要add, commit一共两步呢?
			因为commit可以一次提交很多文件, 所以你可以多次add不同的文件, 比如:
					git add file1.txt
					git add file2.txt file3.txt
					git commit -m "add 3 files."

	(7).现在总结一下今天学的两点内容:
					初始化一个Git仓库, 使用git init命令;
					添加文件到Git仓库, 分两步:
							step1:		使用命令git add <file>, 注意, 可反复多次使用, 添加多个文件
							step2:		使用命令git commit -m <message>, 完成
									
	(8).我们已经成功地添加并提交了一个readme.txt文件, 现在, 是时候继续工作了, 于是, 我们继续修改readme.txt文件, 改成如下内容:
				Git is a distributed version control system.
				Git is free software.
			
			现在, 运行git status命令看看结果:
				git status
			
			git status命令可以让我们时刻掌握仓库当前的状态, 上面的命令输出告诉我们, readme.txt被修改过了, 但还没有准备提交的修改!!!
			虽然Git告诉我们readme.txt被修改了, 但如果能看看具体修改了什么内容, 自然是很好的!!!
			比如你休假两周从国外回来, 第一天上班时, 已经记不清上次怎么修改的readme.txt, 所以, 需要用git diff这个命令看看:
				git diff readme.txt

			git diff顾名思义就是查看difference, 显示的格式正是Unix通用的diff格式, 可以从上面的命令输出看到, 我们在第一行添加了一个distributed单词!!!
			知道了对readme.txt作了什么修改后, 再把它提交到仓库就放心多了, 提交修改和提交新文件是一样的两步, 第一步是git add:
								git add readme.txt
					同样没有任何输出!!!
					在执行第二步git commit之前, 我们再运行git status看看当前仓库的状态:
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   readme.txt							
	
			git status告诉我们, 将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：
									git commit -m "add distributed"
			提交后, 我们再用git status命令看看仓库的当前状态:
									git status

$ git status
On branch master
nothing to commit, working tree clean

			Git告诉我们当前没有需要提交的修改, 而且, 工作目录是干净(working tree clean)的!!!

	(9).要随时掌握工作区的状态, 使用git status命令!!!
			如果git status告诉你有文件被修改过, 用git diff可以查看修改内容!!!
			
{[-版本回退-]}
	(1).现在, 你已经学会了修改文件, 然后把修改提交到Git版本库, 现在, 再练习一次, 修改readme.txt文件如下:
								Git is a distributed version control system.
								Git is free software distributed under the GPL.
	(2).然后尝试提交:
						git add readme.txt
						git commit -m "append GPL"
						
			像这样, 你不断对文件进行修改, 然后不断提交修改到版本库里, 就好比玩RPG游戏时, 每通过一关就会自动把游戏状态存盘, 
			如果某一关没过去, 你还可以选择读取前一关的状态。
			有些时候, 在打Boss之前, 你会手动存盘, 以便万一打Boss失败了, 可以从最近的地方重新开始。
			Git也是一样, 每当你觉得文件修改到一定程度的时候, 就可以"保存一个快照", 这个快照在Git中被称为commit。
			一旦你把文件改乱了, 或者误删了文件, 还可以从最近的一个commit恢复, 然后继续工作, 而不是把几个月的工作成果全部丢失!!!
			
			现在, 我们回顾一下readme.txt文件一共有几个版本被提交到Git仓库里了:
						版本1:		wrote a readme file
				Git is a version control system.
				Git is free software.
				
						版本2:		add distributed	
				Git is a distributed version control system.
				Git is free software.
				
						版本3:		append GPL
				Git is a distributed version control system.
				Git is free software distributed under the GPL.
		
			当然了, 在实际工作中, 我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容, 不然要版本控制系统干什么!!!
			版本控制系统肯定有某个命令可以告诉我们历史记录, 在Git中, 我们用git log命令查看:
$ git log
commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master)
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Fri May 18 21:06:15 2018 +0800

    append GPL

commit e475afc93c209a690c39c13a46716e8fa000c366
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Fri May 18 21:03:36 2018 +0800

    add distributed

commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Fri May 18 20:59:18 2018 +0800

    wrote a readme file
	
			git log命令显示从最近到最远的提交日志, 我们可以看到3次提交, 最近的一次是append GPL, 上一次是add distributed, 最早的一次是wrote a readme file!!!
				

			如果嫌输出信息太多, 看得眼花缭乱的, 可以试试加上--pretty=oneline参数:
				git log --pretty=oneline
				1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -> master) append GPL
				e475afc93c209a690c39c13a46716e8fa000c366 add distributed
				eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file

			需要友情提示的是, 你看到的一大串类似1094adb...的是commit id(版本号), 和SVN不一样, Git的commit id不是1，2，3……递增的数字, 而是一个SHA1计算出来的一个非常大的数字,
								用十六进制表示, 而且你看到的commit id和我的肯定不一样, 以你自己的为准!!!
			为什么commit id需要用这么一大串数字表示呢?
			因为Git是分布式的版本控制系统, 后面我们还要研究多人在同一个版本库里工作, 如果大家都用1，2，3……作为版本号, 那肯定就冲突了!!!

	(3).每提交一个新版本, 实际上Git就会把它们自动串成一条时间线, 如果使用可视化工具查看Git历史, 就可以更清楚地看到提交历史的时间线!!!
			好了, 现在我们启动时光穿梭机, 准备把readme.txt回退到上一个版本, 也就是add distributed的那个版本, 怎么做呢?
			首先, Git必须知道当前版本是哪个版本, 在Git中, 用HEAD表示当前版本, 也就是最新的提交1094adb...(注意我的提交ID和你的肯定不一样), 上一个版本就是HEAD^, 上上一个版本就是HEAD^^, 当然往上100个版本写100个^比较容易数不过来, 所以写成HEAD~100!!!
			现在, 我们要把当前版本append GPL回退到上一个版本add distributed, 就可以使用git reset命令:
						$ git reset --hard HEAD^
						HEAD is now at e475afc add distributed
			
	(4).--hard参数有啥意义?  这个后面再讲, 现在你先放心使用!!!
	
	(5).看看readme.txt的内容是不是版本add distributed:
$ cat readme.txt
Git is a distributed version control system.
Git is free software.
			果然被还原了!!!
			
	(6).还可以继续回退到上一个版本wrote a readme file, 不过且慢, 然我们用git log再看看现在版本库的状态:
$ git log
commit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -> master)
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Fri May 18 21:03:36 2018 +0800

    add distributed

commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Fri May 18 20:59:18 2018 +0800

    wrote a readme file
	
			最新的那个版本append GPL已经看不到了!!!
			好比你从21世纪坐时光穿梭机来到了19世纪, 想再回去已经回不去了, 肿么办???
			办法其实还是有的, 只要上面的命令行窗口还没有被关掉, 你就可以顺着往上找啊找啊, 找到那个append GPL的commit id是1094adb..., 于是就可以指定回到未来的某个版本:
$ git reset --hard 1094a
HEAD is now at 83b0afe append GPL
			版本号没必要写全, 前几位就可以了, Git会自动去找!!!
			当然也不能只写前一两位, 因为Git可能会找到多个版本号, 就无法确定是哪一个了!!!
再小心翼翼地看看readme.txt的内容:
			$ cat readme.txt
			Git is a distributed version control system.
			Git is free software distributed under the GPL.

果然, 我胡汉三又回来了!!!
Git的版本回退速度非常快, 因为Git在内部有个指向当前版本的HEAD指针, 当你回退版本的时候, Git仅仅是把HEAD从指向append GPL:
然后顺便把工作区的文件更新了, 所以你让HEAD指向哪个版本号, 你就把当前版本定位在哪!!!
现在, 你回退到了某个版本, 关掉了电脑, 第二天早上就后悔了, 想恢复到新版本怎么办? 找不到新版本的commit id怎么办?

在Git中, 总是有后悔药可以吃的!!!
当你用$ git reset --hard HEAD^回退到add distributed版本时, 再想恢复到append GPL, 就必须找到append GPL的commit id。
Git提供了一个命令git reflog用来记录你的每一次命令:
$ git reflog
e475afc HEAD@{1}: reset: moving to HEAD^
1094adb (HEAD -> master) HEAD@{2}: commit: append GPL
e475afc HEAD@{3}: commit: add distributed
eaadf4e HEAD@{4}: commit (initial): wrote a readme file

终于舒了口气, 从输出可知, append GPL的commit id是1094adb, 现在, 你又可以乘坐时光机回到未来了!!!

	(7).现在总结一下:
			①.HEAD指向的版本就是当前版本, 因此, Git允许我们在版本的历史之间穿梭, 使用命令git reset --hard commit_id;
			②.穿梭前, 用git log可以查看提交历史, 以便确定要回退到哪个版本;
			③.要重返未来, 用git reflog查看命令历史, 以便确定要回到未来的哪个版本!!!

{[-工作区和暂存区-]}			
	(1).Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念;
	(2).工作区(Working Directory):		就是你在电脑里能看到的目录, 比如我的learngit文件夹就是一个工作区!!!
	(3).版本库(Repository):				工作区有一个隐藏目录.git, 这个不算工作区, 而是Git的版本库!!!
				Git的版本库里存了很多东西, 其中最重要的就是称为stage(或者叫index)的暂存区, 还有Git为我们自动创建的第一个分支master, 以及指向master的一个指针叫HEAD!!!
	(4).分支和HEAD的概念我们以后再讲!!!
	(5).前面讲了我们把文件往Git版本库里添加的时候, 是分两步执行的:
			①.第一步是用git add把文件添加进去, 实际上就是把文件修改添加到暂存区;
			②.第二步是用git commit提交更改, 实际上就是把暂存区的所有内容提交到当前分支;

	(6).因为我们创建Git版本库时, Git自动为我们创建了唯一一个master分支, 所以, 现在, git commit就是往master分支上提交更改!!!

	(7).你可以简单理解为, 需要提交的文件修改通通放到暂存区, 然后, 一次性提交暂存区的所有修改!!!
	
	(8).俗话说, 实践出真知, 现在, 我们再练习一遍, 先对readme.txt做个修改, 比如加上一行内容:
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.	
	
	(9).然后, 在工作区新增一个LICENSE文本文件(内容随便写)。
	
	(10).先用git status查看一下状态:
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   readme.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    LICENSE

no changes added to commit (use "git add" and/or "git commit -a")

			Git非常清楚地告诉我们, readme.txt被修改了, 而LICENSE还从来没有被添加过, 所以它的状态是Untracked!!!
	
	(11).现在, 使用两次命令git add, 把readme.txt和LICENSE都添加后, 用git status再查看一下:
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   LICENSE
    modified:   readme.txt
				
	(12).git commit -m "understand how stage works"
[master e43a48b] understand how stage works
 2 files changed, 2 insertions(+)
 create mode 100644 LICENSE
	
	(13).一旦提交后, 如果你又没有对工作区做任何修改, 那么工作区就是"干净"的:
$ git status
On branch master
nothing to commit, working tree clean

	(14).暂存区是Git非常重要的概念, 弄明白了暂存区, 就弄明白了Git的很多操作到底干了什么!!!
	

{[-管理修改-]}			
		(1).假定你已经完全掌握了暂存区的概念;
		(2).为什么Git比其他版本控制系统设计得优秀, 因为Git跟踪并管理的是修改, 而非文件!!!
		(3).什么是修改? 比如你新增了一行, 这就是一个修改, 删除了一行, 也是一个修改, 更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。
		(4).为什么说Git管理的是修改, 而不是文件呢?  我们还是做实验。
					①.对readme1.txt做一个修改, 比如加一行内容:
		$ cat readme1txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes.
		
					②.然后, 添加:
		$ git add readme1.txt
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
#
					
					③.然后，再修改readme1.txt：
$ cat readme1.txt 
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
										
					④.提交:
$ git commit -m "git tracks changes"
[master 519219b] git tracks changes
 1 file changed, 1 insertion(+)
 
					⑤.提交后, 再看看状态:
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")

			咦, 怎么第二次的修改没有被提交?
			别激动, 我们回顾一下操作过程:
			第一次修改 -> git add -> 第二次修改 -> git commit
			你看, 我们前面讲了, Git管理的是修改, 当你用git add命令后, 在工作区的第一次修改被放入暂存区, 准备提交, 但是, 在工作区的第二次修改并没有放入暂存区,
						所以, git commit只负责把暂存区的修改提交了, 也就是第一次的修改被提交了, 第二次的修改不会被提交!!!!!!

					⑥.提交后, 用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别:
$ git diff HEAD -- readme.txt 
diff --git a/readme.txt b/readme.txt
index 76d770f..a9c5755 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,4 +1,4 @@
 Git is a distributed version control system.
 Git is free software distributed under the GPL.
 Git has a mutable index called stage.
-Git tracks changes.
+Git tracks changes of files.								
				
					可见, 第二次修改确实没有被提交!!!

		(5).那怎么提交第二次修改呢?
				你可以继续git add再git commit, 也可以别着急提交第一次修改, 先git add第二次修改, 再git commit, 就相当于把两次修改合并后一块提交了:
								第一次修改 -> git add -> 第二次修改 -> git add -> git commit
					好, 现在, 把第二次修改提交了, 然后开始小结!!!
								
		(6).现在, 你又理解了Git是如何跟踪修改的, 每次修改, 如果不用git add到暂存区, 那就不会加入到commit中!!!
			
{[-撤销修改-]}
		(1).自然, 你是不会犯错的, 不过现在是凌晨两点, 你正在赶一份工作报告, 你在readme1.txt中添加了一行:
$ cat readme1.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.
							
		(2).在你准备提交前, 一杯咖啡起了作用, 你猛然发现了stupid boss可能会让你丢掉这个月的奖金!!!
既然错误发现得很及时, 就可以很容易地纠正它, 你可以删掉最后一行, 手动把文件恢复到上一个版本的状态。
如果用git status查看一下:
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")
		
		(3).你可以发现, Git会告诉你, git checkout -- file可以丢弃工作区的修改:
$ git checkout -- readme1.txt

		(4).命令git checkout -- readme1.txt意思就是, 把readme1.txt文件在工作区的修改全部撤销, 这里有两种情况:
	①.一种是readme.txt自修改后还没有被放到暂存区, 现在, 撤销修改就回到和版本库一模一样的状态;
	②.一种是readme.txt已经添加到暂存区后, 又作了修改, 现在, 撤销修改就回到添加到暂存区后的状态.

				总之, 就是让这个文件回到最近一次git commit或git add时的状态。

现在, 看看readme1.txt的文件内容:
$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
		
		文件内容果然复原了。

		(5).git checkout -- file命令中的--很重要, 没有--, 就变成了"切换到另一个分支"的命令, 我们在后面的分支管理中会再次遇到git checkout命令。
	现在假定是凌晨3点, 你不但写了一些胡话, 还git add到暂存区了:
$ cat readme1.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.

test_test_test

$ git add readme.txt
	
		(6).庆幸的是, 在commit之前, 你发现了这个问题, 用git status查看一下, 修改只是添加到了暂存区, 还没有提交:
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   readme.txt
	
		(7).Git同样告诉我们, 用命令git reset HEAD <file>可以把暂存区的修改撤销掉(unstage), 重新放回工作区:
$ git reset HEAD readme1.txt
Unstaged changes after reset:
M    readme.txt	
		
		(8).git reset命令既可以回退版本, 也可以把暂存区的修改回退到工作区, 当我们用HEAD时, 表示最新的版本!!!
		
		(9).再用git status查看一下, 现在暂存区是干净的, 工作区有修改:
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   readme1.txt
	
		(10).还记得如何丢弃工作区的修改吗?					
$ git checkout -- readme1.txt

$ git status
On branch master
nothing to commit, working tree clean		
		整个世界终于清静了!!!
		
		(11).现在, 假设你不但改错了东西, 还从暂存区提交到了版本库, 怎么办呢? 还记得版本回退一节吗? 可以回退到上一个版本!!!
	不过, 这是有条件的, 就是你还没有把自己的本地版本库推送到远程。
	还记得Git是分布式版本控制系统吗?
	我们后面会讲到远程版本库, 一旦你把stupid boss提交推送到远程版本库, 你就真的惨了……
	
		(12).又到了小结时间:
	场景1:	当你改乱了工作区某个文件的内容, 想直接丢弃工作区的修改时, 用命令git checkout -- file;
	场景2:	当你不但改乱了工作区某个文件的内容, 还添加到了暂存区时, 想丢弃修改, 分两步, 第一步用命令git reset HEAD <file>, 就回到了场景1, 第二步按场景1操作;
	场景3:	已经提交了不合适的修改到版本库时, 想要撤销本次提交, 参考版本回退一节(git reset --hard 1094a), 不过前提是没有推送到远程库!!!

{[-删除文件-]}
		(1).在Git中, 删除也是一个修改操作, 我们实战一下, 先添加一个新文件test.txt到Git并且提交:
$ git add test.txt

$ git commit -m "add test.txt"
[master b84166e] add test.txt
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
 
		(2).一般情况下, 你通常直接在文件管理器中把没用的文件删了, 或者用rm命令删了:				$ rm test.txt
			
		(3).这个时候, Git知道你删除了文件, 因此, 工作区和版本库就不一致了, git status命令会立刻告诉你哪些文件被删除了:
$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    deleted:    test.txt

no changes added to commit (use "git add" and/or "git commit -a")
				
		(4).现在你有两个选择:
	①.一是确实要从版本库中删除该文件, 那就用命令git rm删掉, 并且git commit:
$ git rm test.txt
rm 'test.txt'

$ git commit -m "remove test.txt"
[master d46f35e] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
									现在, 文件就从版本库中被删除了!!!
				小提示: 先手动删除文件, 然后使用git rm <file>和git add<file>效果是一样的!!!

	②.另一种情况是删错了, 因为版本库里还有呢, 所以可以很轻松地把误删的文件恢复到最新版本:
				$ git checkout -- test.txt

https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758392816224cafd33c44b4451887cc941e6716805c000				
		(5).
		(6).
		(7).
		(8).

















	
	
	
	
	
